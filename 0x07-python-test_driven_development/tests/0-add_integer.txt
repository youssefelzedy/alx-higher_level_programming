the ''0-add_integer'' module
============================

Using ``add_integer``
---------------------

Import function from module:
	>>> add_integer = __import__('0-add_integer').add_integer

Test int simple function:
    >>> add_integer(1, 2)
    3

    >>> add_integer(100, -2)
    98

    >>> add_integer(2)
    100

Test float simple function:
    >>> add_integer(2.5, 2)
    4

    >>> add_integer(100.0, 2)
    102

    >>> add_integer(2.5)
    100

    >>> add_integer(2.5, 2.5)
    4

Test the nigative values:
    >>> add_integer(-2, 2)
    0

    >>> add_integer(-2, -2)
    -4

    >>> add_integer(-2.5)
    96

    >> add_integer(-2)
    96

Test big values:
    >>> add_integer(999999998, 999999999)
    1999999997

    >>> add_integer(34263478, -89234582395)
    -89200318917

Test infinity value:
    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Test NaN value:
    >>> add_integer(float('nan'), float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

Test invalid values:
    >>> add_integer("foo", 0)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(123123, [])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer("foo", "bar")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer
